import abc

from _typeshed import Incomplete

class Serializable(abc.ABC, metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def to_dict(self): ...
    @classmethod
    @abc.abstractmethod
    def from_dict(cls, d): ...
    def to_json(self, indent: Incomplete | None = ...) -> str: ...
    @classmethod
    def from_json(cls, serialized: str): ...
    def to_bson(self): ...
    @classmethod
    def from_bson(cls, serialized): ...
    def to_toml(self) -> None: ...
    @classmethod
    def from_toml(cls, serialized): ...
    def to_yaml(self): ...
    @classmethod
    def from_yaml(cls, serialized): ...
    def to_messagepack(self): ...
    @classmethod
    def from_messagepack(cls, serialized): ...
    def to_xml(self, indent: int = ...): ...
    @classmethod
    def from_xml(cls, serialized) -> None: ...
    def to_pickle(self): ...
    @classmethod
    def from_pickle(cls, serialized): ...
