from collections.abc import Generator
from typing import Dict, List, Tuple, Union

from openff.units import Quantity as Quantity
from openff.units import Unit as Unit
from openff.units import unit
from openff.utilities import requires_package as requires_package

def inherit_docstrings(cls): ...
def all_subclasses(cls): ...
def temporary_cd(dir_path) -> Generator[None, None, None]: ...
def get_data_file_path(relative_path): ...
def unit_to_string(input_unit: Unit) -> str: ...
def quantity_to_string(input_quantity: Quantity) -> str: ...
def string_to_unit(unit_string): ...
def string_to_quantity(quantity_string) -> Union[str, int, float, Quantity]: ...
def convert_all_strings_to_quantity(
    smirnoff_data: Dict, ignore_keys: List[str] = ...
): ...
def convert_all_quantities_to_string(smirnoff_data): ...
def object_to_quantity(object): ...
def serialize_numpy(np_array) -> Tuple[bytes, Tuple[int]]: ...
def deserialize_numpy(serialized_np: Union[bytes, List], shape: Tuple[int]): ...
def convert_0_2_smirnoff_to_0_3(smirnoff_data_0_2): ...
def convert_0_1_smirnoff_to_0_2(smirnoff_data_0_1): ...
def get_molecule_parameterIDs(molecules, forcefield): ...
