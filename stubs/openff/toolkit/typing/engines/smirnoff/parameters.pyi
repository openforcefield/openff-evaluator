from typing import Any, Callable, Optional

from openff.toolkit.topology.molecule import Molecule
from openff.toolkit.utils.exceptions import (
    DuplicateParameterError as DuplicateParameterError,
)
from openff.toolkit.utils.exceptions import (
    DuplicateVirtualSiteTypeException as DuplicateVirtualSiteTypeException,
)
from openff.toolkit.utils.exceptions import (
    FractionalBondOrderInterpolationMethodUnsupportedError as FractionalBondOrderInterpolationMethodUnsupportedError,
)
from openff.toolkit.utils.exceptions import (
    IncompatibleParameterError as IncompatibleParameterError,
)
from openff.toolkit.utils.exceptions import (
    NotEnoughPointsForInterpolationError as NotEnoughPointsForInterpolationError,
)
from openff.toolkit.utils.exceptions import ParameterLookupError as ParameterLookupError
from openff.toolkit.utils.exceptions import SMIRNOFFSpecError as SMIRNOFFSpecError
from openff.toolkit.utils.exceptions import (
    SMIRNOFFSpecUnimplementedError as SMIRNOFFSpecUnimplementedError,
)
from openff.toolkit.utils.exceptions import (
    UnassignedAngleParameterException as UnassignedAngleParameterException,
)
from openff.toolkit.utils.exceptions import (
    UnassignedBondParameterException as UnassignedBondParameterException,
)
from openff.toolkit.utils.exceptions import (
    UnassignedMoleculeChargeException as UnassignedMoleculeChargeException,
)
from openff.toolkit.utils.exceptions import (
    UnassignedProperTorsionParameterException as UnassignedProperTorsionParameterException,
)
from openff.toolkit.utils.exceptions import (
    UnassignedValenceParameterException as UnassignedValenceParameterException,
)
from openff.units import Unit as Unit
from openff.units import unit

class ParameterAttribute:
    class UNDEFINED: ...

    def __init__(
        self,
        default: Any = ...,
        unit: Optional[Unit] = ...,
        converter: Optional[Callable] = ...,
        docstring: str = ...,
    ) -> None: ...
    def __set_name__(self, owner, name) -> None: ...
    @property
    def name(self): ...
    def __get__(self, instance, owner): ...
    def __set__(self, instance, value) -> None: ...
    def converter(self, converter): ...

class IndexedParameterAttribute(ParameterAttribute): ...
class MappedParameterAttribute(ParameterAttribute): ...
class IndexedMappedParameterAttribute(ParameterAttribute): ...

class _ParameterAttributeHandler:
    def __init__(self, allow_cosmetic_attributes: bool = ..., **kwargs) -> None: ...
    def to_dict(
        self, discard_cosmetic_attributes: bool = ..., duplicate_attributes: Any = ...
    ): ...
    def __getattr__(self, item): ...
    def __setattr__(self, key, value) -> None: ...
    def add_cosmetic_attribute(self, attr_name, attr_value) -> None: ...
    def delete_cosmetic_attribute(self, attr_name) -> None: ...
    def attribute_is_cosmetic(self, attr_name): ...

class ParameterList(list):
    def __init__(self, input_parameter_list: Any = ...) -> None: ...
    def append(self, parameter) -> None: ...
    def extend(self, other) -> None: ...
    def index(self, item): ...
    def insert(self, index, parameter) -> None: ...
    def __delitem__(self, item) -> None: ...
    def __getitem__(self, item): ...
    def __reduce__(self): ...
    def __contains__(self, item) -> bool: ...
    def to_list(self, discard_cosmetic_attributes: bool = ...): ...

class ParameterType(_ParameterAttributeHandler):
    def __init__(
        self, smirks, allow_cosmetic_attributes: bool = ..., **kwargs
    ) -> None: ...

class ParameterHandler(_ParameterAttributeHandler):
    def version(self, attr, new_version): ...
    def __init__(
        self,
        allow_cosmetic_attributes: bool = ...,
        skip_version_check: bool = ...,
        **kwargs
    ) -> None: ...
    @property
    def parameters(self): ...
    @property
    def TAGNAME(self): ...
    @property
    def known_kwargs(self): ...
    def check_handler_compatibility(self, handler_kwargs) -> None: ...
    def get_parameter(self, parameter_attrs): ...

    class _Match:
        @property
        def parameter_type(self): ...
        @property
        def environment_match(self): ...
        def __init__(self, parameter_type, environment_match) -> None: ...

    def find_matches(self, entity, unique: bool = ...): ...
    def create_force(self, *args, **kwarsg) -> None: ...
    def to_dict(
        self, discard_cosmetic_attributes: bool = ..., duplicate_attributes: Any = ...
    ): ...
    def __getitem__(self, val): ...

class ConstraintHandler(ParameterHandler):
    class ConstraintType(ParameterType): ...

class BondHandler(ParameterHandler):
    class BondType(ParameterType):
        def __init__(self, **kwargs) -> None: ...

    def __init__(self, **kwargs) -> None: ...
    def check_handler_compatibility(self, other_handler) -> None: ...

class AngleHandler(ParameterHandler):
    class AngleType(ParameterType): ...

    def check_handler_compatibility(self, other_handler) -> None: ...

class ProperTorsionHandler(ParameterHandler):
    class ProperTorsionType(ParameterType): ...

    def check_handler_compatibility(self, other_handler) -> None: ...

class ImproperTorsionHandler(ParameterHandler):
    class ImproperTorsionType(ParameterType): ...

    def check_handler_compatibility(self, other_handler) -> None: ...
    def find_matches(self, entity, unique: bool = ...): ...

class _NonbondedHandler(ParameterHandler): ...

class vdWHandler(_NonbondedHandler):
    class vdWType(ParameterType):
        def __init__(self, **kwargs) -> None: ...
        def __setattr__(self, name, value) -> None: ...
        def to_dict(
            self,
            discard_cosmetic_attributes: bool = ...,
            duplicate_attributes: Any = ...,
        ): ...

    def check_handler_compatibility(self, other_handler) -> None: ...

class ElectrostaticsHandler(_NonbondedHandler):
    def __init__(self, **kwargs) -> None: ...
    def check_handler_compatibility(self, other_handler) -> None: ...

class LibraryChargeHandler(_NonbondedHandler):
    class LibraryChargeType(ParameterType):
        def __init__(self, **kwargs) -> None: ...
        @classmethod
        def from_molecule(cls, molecule: Molecule): ...

    def find_matches(self, entity, unique: bool = ...): ...

class ToolkitAM1BCCHandler(_NonbondedHandler):
    def check_handler_compatibility(
        self, other_handler, assume_missing_is_default: bool = ...
    ) -> None: ...

class ChargeIncrementModelHandler(_NonbondedHandler):
    class ChargeIncrementType(ParameterType):
        def __init__(self, **kwargs) -> None: ...

    def check_handler_compatibility(
        self, other_handler, assume_missing_is_default: bool = ...
    ) -> None: ...
    def find_matches(self, entity, unique: bool = ...): ...

ConstraintType = ConstraintHandler.ConstraintType
BondType = BondHandler.BondType
AngleType = AngleHandler.AngleType
ProperTorsionType = ProperTorsionHandler.ProperTorsionType
ImproperTorsionType = ImproperTorsionHandler.ImproperTorsionType
vdWType = vdWHandler.vdWType
LibraryChargeType = LibraryChargeHandler.LibraryChargeType
ChargeIncrementType = ChargeIncrementModelHandler.ChargeIncrementType
